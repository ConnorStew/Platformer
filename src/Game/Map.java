package Game;

import Game.Entities.*;
import Game.UI.Level;
import com.sun.javaws.exceptions.InvalidArgumentException;
import javafx.util.Pair;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

/**
 * This class is responsible for loading JSON files generated by Tiled.
 * @author Connor Stewart
 */
public class Map {

    /** The size of tiles in the map. (width & height) */
    private static final int SIZE = 16;

    /** The height of the map. */
    private int height;

    /** The width of the map. */
    private int width;

    /** The tiles in the map. */
    private HashMap<Pair<Integer, Integer>, Tile> tiles = new HashMap<>();

    /** The sprites in the map. */
    private ArrayList<Sprite> sprites = new ArrayList<>();

    /** The user controlled player. */
	private Player player;

    /**
     * Loads the given JSON map.
     * @param jsonFileLocation the location of the map
     * @param level a reference to the level this map has been loaded for to be passed to the player
     * @throws InvalidArgumentException throws this exception if the map is an invalid format
     */
	public Map(String jsonFileLocation, Level level) throws InvalidArgumentException {
        String jsonTextContent = null;

        try {
            InputStream is = new FileInputStream(jsonFileLocation);
            BufferedReader buf = new BufferedReader(new InputStreamReader(is));

            String line = buf.readLine();
            StringBuilder sb = new StringBuilder();

            while(line != null){
                sb.append(line).append("\n");
                line = buf.readLine();
            }

            jsonTextContent = sb.toString();
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (jsonTextContent == null)
            throw new InvalidArgumentException(new String[]{jsonFileLocation + " does not exist."});

        JSONObject base = new JSONObject(jsonTextContent);
        width = base.getJSONArray("layers").getJSONObject(0).getInt("width");
        height = base.getJSONArray("layers").getJSONObject(0).getInt("height");

        JSONArray tilesJSON = base.getJSONArray("tilesets").getJSONObject(0).getJSONArray("tiles");
        int firstGID = base.getJSONArray("tilesets").getJSONObject(0).getInt("firstgid");

        //The images used for the tiles in the map.
        HashMap<Integer, Image> tileImages = new HashMap<>();
        for (int i = 0; i < tilesJSON.length(); i++) {
            JSONObject entry = tilesJSON.getJSONObject(i);

            int id = entry.getInt("id");
            String location = entry.getString("image");

            Image image = new ImageIcon("maps/" + location).getImage();

            if (image.getWidth(null) == -1 && image.getHeight(null) == -1)
                throw new InvalidArgumentException(new String[]{location + " is not a valid image."});

            tileImages.put(id, image);
        }

        JSONArray data = base.getJSONArray("layers").getJSONObject(0).getJSONArray("data");
        int count = 0;
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int id = data.getInt(count);

                if (id != 0) {
                    Tile tile = new Tile(tileImages.get(id - firstGID), SIZE,SIZE, x, y);
                    tiles.put(new Pair<>(x,y), tile);
                }

                count++;
            }
        }

        //surround the map with tiles
        for (int x = 0; x < width; x++) {
            Tile tile = new Tile(tileImages.get(0), SIZE,SIZE, x, -1);
            tiles.put(new Pair<>(x,-1), tile);

            tile = new Tile(tileImages.get(0), SIZE,SIZE, x, height);
            tiles.put(new Pair<>(x,height), tile);
        }

        for (int y = 0; y < height; y++) {
            Tile tile = new Tile(tileImages.get(0), SIZE,SIZE, -1, y);
            tiles.put(new Pair<>(-1,y), tile);

            tile = new Tile(tileImages.get(0), SIZE,SIZE, width, y);
            tiles.put(new Pair<>(width,y), tile);
        }

        //load entities
		JSONArray objects = base.getJSONArray("layers").getJSONObject(1).getJSONArray("objects");
        for (int i = 0; i < objects.length(); i++) {
        	JSONObject object = objects.getJSONObject(i);
        	String name = object.getString("name");
        	int x = object.getInt("x");
			int y = object.getInt("y");

			switch (name.toLowerCase()) {
                case "coin":
                    sprites.add(new Coin(x, y));
                    break;
				case "slime":
					sprites.add(new Slime(tiles.values(), x, y));
					break;
                case "signpost":
                    sprites.add(new Signpost(x, y));
                    break;
				case "player":
					player = new Player(tiles.values(), level, x , y);
					for (Sprite sprite : sprites)
						sprite.setPlayer(player);
					break;
				default:
					throw new InvalidArgumentException(new String[]{"Unknown object name: " + name});
			}
		}

		if (player == null)
			throw new InvalidArgumentException(new String[]{"You must specify a player object!"});
    }

    /**
     * Gets all tiles in the map.
     * @return the tiles in the map
     */
    public Collection<Tile> getTiles() {
        return tiles.values();
    }

    /**
     * Gets the height of the map in pixels.
     * @return map height in pixels
     */
    public int getHeight() {
        return SIZE * height;
    }

    /**
     * Gets the width of map in pixels.
     * @return map width in pixels
     */
    public int getWidth() {
        return SIZE * width;
    }

    /**
     * Gets the player loaded by the map.
     * @return the player loaded by the map
     */
	public Player getPlayer() {
    	return player;
	}

    /**
     * Gets all sprites in the map.
     * @return the sprites in the map
     */
    public ArrayList<Sprite> getSprites() {
	    return sprites;
    }
}
